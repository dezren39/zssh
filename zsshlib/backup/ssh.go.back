/*
	Copyright NetFoundry, Inc.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	https://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

package zsshlib

import (
	"bufio"
	"context"
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha1"
	"encoding/base64"
	"fmt"
	"github.com/google/uuid"
	"github.com/gorilla/securecookie"
	"github.com/zitadel/oidc/v2/pkg/client/rp/cli"
	"github.com/zitadel/oidc/v2/pkg/oidc"
	"golang.org/x/crypto/ssh/knownhosts"
	"io"
	"net"
	"os"
	"path"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/openziti/sdk-golang/ziti"
	"github.com/pkg/errors"
	"github.com/pkg/sftp"
	"github.com/zitadel/oidc/v2/pkg/client/rp"
	httphelper "github.com/zitadel/oidc/v2/pkg/http"
	"golang.org/x/oauth2"

	"github.com/sirupsen/logrus"
	"golang.org/x/crypto/ssh"
	"golang.org/x/crypto/ssh/terminal"
)

const (
	ID_RSA  = "id_rsa"
	SSH_DIR = ".ssh"
)

var (
	DefaultAuthScopes = "openid profile"
)

func RemoteShell(client *ssh.Client, args []string) error {
	session, err := client.NewSession()
	if err != nil {
		return err
	}

	if len(args) > 0 {
		if err := session.RequestPty("xterm", 80, 40, ssh.TerminalModes{}); err != nil {
			logrus.Fatalf("Failed to request pseudo terminal: %v", err)
		}

		defer func() { _ = session.Close() }()

		stdoutPipe, err := session.StdoutPipe()
		if err != nil {
			logrus.Fatal(os.Stderr, "Failed to create stdout pipe:", err)
		}

		stderrPipe, err := session.StderrPipe()
		if err != nil {
			logrus.Fatal("Failed to create stderr pipe:", err)
		}

		cmd := strings.Join(args, " ")
		logrus.Infof("executing remote command: %v", cmd)
		if err := session.Start(cmd); err != nil {
			logrus.Fatal("Failed to start command:", err)
		}

		processOutput(stdoutPipe, stderrPipe)

		// Wait for the command to finish
		if err := session.Wait(); err != nil {
			logrus.Fatal("Command execution failed:", err)
		}

		return nil
	}

	stdInFd := int(os.Stdin.Fd())
	stdOutFd := int(os.Stdout.Fd())

	oldState, err := terminal.MakeRaw(stdInFd)
	if err != nil {
		logrus.Fatal(err)
	}
	defer func() {
		_ = session.Close()
		_ = terminal.Restore(stdInFd, oldState)
	}()

	session.Stdout = os.Stdout
	session.Stderr = os.Stderr
	session.Stdin = os.Stdin

	termWidth, termHeight, err := terminal.GetSize(stdOutFd)
	if err != nil {
		logrus.Fatal(err)
	}

	if err := session.RequestPty("xterm", termHeight, termWidth, ssh.TerminalModes{ssh.ECHO: 1}); err != nil {
		return err
	}

	err = session.Shell()
	if err != nil {
		return err
	}
	err = session.Wait()
	if err != nil {
		return err
	}
	return nil
}

func Dial(config *ssh.ClientConfig, conn net.Conn) (*ssh.Client, error) {
	c, chans, reqs, err := ssh.NewClientConn(conn, "", config)
	if err != nil {
		return nil, err
	}
	return ssh.NewClient(c, chans, reqs), nil
}

// OIDCConfig represents a config for the OIDC auth flow.
type OIDCConfig struct {
	// CallbackPath is the path of the callback handler.
	CallbackPath string

	// CallbackPort is the port of the callback handler.
	CallbackPort string

	// Issuer is the URL of the OpenID Connect provider.
	Issuer string

	// HashKey is used to authenticate values using HMAC.
	HashKey []byte

	// BlockKey is used to encrypt values using AES.
	BlockKey []byte

	// IDToken is the ID token returned by the OIDC provider.
	IDToken string

	// Logger function for debug.
	Logf func(format string, args ...interface{})

	oauth2.Config
}

// GetToken starts a local HTTP server, opens the web browser to initiate the OIDC Discovery and
// Token Exchange flow, blocks until the user completes authentication and is redirected back, and returns
// the OIDC tokens.
func GetToken(ctx context.Context, config *OIDCConfig) (string, error) {
	if err := config.validateAndSetDefaults(); err != nil {
		return "", fmt.Errorf("invalid config: %w", err)
	}

	cookieHandler := httphelper.NewCookieHandler(config.HashKey, config.BlockKey, httphelper.WithUnsecure())

	options := []rp.Option{
		rp.WithCookieHandler(cookieHandler),
		rp.WithVerifierOpts(rp.WithIssuedAtOffset(5 * time.Second)),
	}
	if config.ClientSecret == "" {
		options = append(options, rp.WithPKCE(cookieHandler))
	}

	relyingParty, err := rp.NewRelyingPartyOIDC(config.Issuer, config.ClientID, config.ClientSecret, config.RedirectURL, config.Scopes, options...)
	if err != nil {
		logrus.Fatalf("error creating relyingParty %s", err.Error())
	}

	//ctx := context.Background()
	state := func() string {
		return uuid.New().String()
	}

	resultChan := make(chan *oidc.Tokens[*oidc.IDTokenClaims])

	go func() {
		tokens := cli.CodeFlow[*oidc.IDTokenClaims](ctx, relyingParty, config.CallbackPath, config.CallbackPort, state)
		resultChan <- tokens
	}()

	select {
	case tokens := <-resultChan:
		return tokens.IDToken, nil
	case <-ctx.Done():
		return "", errors.New("Timeout: OIDC authentication took too long")
	}
}

// validateAndSetDefaults validates the config and sets default values.
func (c *OIDCConfig) validateAndSetDefaults() error {
	if c.ClientID == "" {
		return fmt.Errorf("ClientID must be set")
	}

	c.HashKey = securecookie.GenerateRandomKey(32)
	c.BlockKey = securecookie.GenerateRandomKey(32)

	if c.Logf == nil {
		c.Logf = func(string, ...interface{}) {}
	}

	c.Scopes = strings.Split(DefaultAuthScopes, " ")

	return nil
}

type SshConfigFactory interface {
	Address() string
	Hostname() string
	Port() int
	User() string
	Config() *ssh.ClientConfig
	KeyPath() string
}

type SshConfigFactoryImpl struct {
	user            string
	host            string
	port            int
	keyPath         string
	resolveAuthOnce sync.Once
	authMethods     []ssh.AuthMethod
}

func NewSshConfigFactoryImpl(user string, keyPath string) *SshConfigFactoryImpl {
	factory := &SshConfigFactoryImpl{
		user:    user,
		host:    "",
		port:    22,
		keyPath: keyPath,
	}
	return factory
}

func (factory *SshConfigFactoryImpl) User() string {
	return factory.user
}
func (factory *SshConfigFactoryImpl) Hostname() string {
	return factory.host
}

func (factory *SshConfigFactoryImpl) Port() int {
	return factory.port
}

func (factory *SshConfigFactoryImpl) KeyPath() string {
	return factory.keyPath
}

func (factory *SshConfigFactoryImpl) Address() string {
	return factory.host + ":" + strconv.Itoa(factory.port)
}

func (factory *SshConfigFactoryImpl) Config() *ssh.ClientConfig {
	factory.resolveAuthOnce.Do(func() {
		var methods []ssh.AuthMethod

		if fileMethod, err := sshAuthMethodFromFile(factory.keyPath); err == nil {
			methods = append(methods, fileMethod)
		} else {
			logrus.Error(err)
		}

		if agentMethod := sshAuthMethodAgent(); agentMethod != nil {
			methods = append(methods, sshAuthMethodAgent())
		}

		methods = append(methods)

		factory.authMethods = methods
	})

	return &ssh.ClientConfig{
		User: factory.user,
		Auth: factory.authMethods,
		//HostKeyCallback: trustedHostKeyCallback,
		//HostKeyCallback: ssh.InsecureIgnoreHostKey(),
		//HostKeyCallback: hostKeyCallback_1132(knownHostsFile()),
		HostKeyCallback: hostKeyCallback1653(knownHostsFile()),
	}
}

func sshAuthMethodFromFile(keyPath string) (ssh.AuthMethod, error) {
	content, err := os.ReadFile(keyPath)
	if err != nil {
		return nil, fmt.Errorf("could not read zssh file [%s]: %w", keyPath, err)
	}

	if signer, err := ssh.ParsePrivateKey(content); err == nil {
		return ssh.PublicKeys(signer), nil
	} else {
		if err.Error() == "zssh: no key found" {
			return nil, fmt.Errorf("no private key found in [%s]: %w", keyPath, err)
		} else if err.(*ssh.PassphraseMissingError) != nil {
			return nil, fmt.Errorf("file is password protected [%s] %w", keyPath, err)
		} else {
			return nil, fmt.Errorf("error parsing private key from [%s]L %w", keyPath, err)
		}
	}
}

func SendFile(client *sftp.Client, localPath string, remotePath string) error {
	localFile, err := os.ReadFile(localPath)

	if err != nil {
		return errors.Wrapf(err, "unable to read local file %v", localFile)
	}

	rmtFile, err := client.OpenFile(remotePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC)

	if err != nil {
		return errors.Wrapf(err, "unable to open remote file %v", remotePath)
	}
	defer func() { _ = rmtFile.Close() }()

	_, err = rmtFile.Write(localFile)
	if err != nil {
		return err
	}

	return nil
}

func RetrieveRemoteFiles(client *sftp.Client, localPath string, remotePath string) error {

	rf, err := client.Open(remotePath)
	if err != nil {
		return fmt.Errorf("error opening remote file [%s] (%w)", remotePath, err)
	}
	defer func() { _ = rf.Close() }()

	lf, err := os.OpenFile(localPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	if err != nil {
		return fmt.Errorf("error opening local file [%s] (%w)", localPath, err)
	}
	defer func() { _ = lf.Close() }()

	_, err = io.Copy(lf, rf)
	if err != nil {
		return fmt.Errorf("error copying remote file to local [%s] (%w)", remotePath, err)
	}
	logrus.Infof("%s => %s", remotePath, localPath)

	return nil
}

func EstablishClient(f *SshFlags, target string, targetIdentity string) *ssh.Client {

	addSSHHostKey1708(knownHostsFile(), "ubuntu@zsshSvcServer", 22)

	if err := ensureKnownHosts(); err != nil {
		log.Fatalf("unable to establish known hosts: %v", err)
	}

	ctx := NewContext(f, true)
	Auth(ctx)

	_, ok := ctx.GetService(f.ServiceName)
	if !ok {
		log.Fatalf("service not found: %s", f.ServiceName)
	}
	dialOptions := &ziti.DialOptions{
		ConnectTimeout: 0,
		Identity:       targetIdentity,
		AppData:        nil,
	}
	conn, err := ctx.DialWithOptions(f.ServiceName, dialOptions)
	if err != nil {
		log.Fatalf("error when dialing service name %s. %v", f.ServiceName, err)
	}
	username := ParseUserName(target, false)
	if username == "" {
		if f.Username == "" {
			username = ParseUserName(target, true)
		} else {
			username = f.Username
		}
	}
	factory := NewSshConfigFactoryImpl(username, f.SshKeyPath)
	config := factory.Config()
	sshConn, err := Dial(config, conn)
	if err != nil {
		log.Fatalf("error dialing SSH Conn: %v", err)
	}
	return sshConn
}

func getConfig(cfgFile string) (zitiCfg *ziti.Config) {
	zitiCfg, err := ziti.NewConfigFromFile(cfgFile)
	if err != nil {
		log.Fatalf("failed to load ziti configuration file: %v", err)
	}
	return zitiCfg
}

// AppendBaseName tags file name on back of remotePath if the path is blank or a directory/*
func AppendBaseName(c *sftp.Client, remotePath string, localPath string, debug bool) string {
	localPath = filepath.Base(localPath)
	if remotePath == "" {
		remotePath = filepath.Base(localPath)
	} else {
		info, err := c.Lstat(remotePath)
		if err == nil && info.IsDir() {
			remotePath = filepath.Join(remotePath, localPath)
		} else if debug {
			log.Infof("Remote File/Directory: %s doesn't exist [%v]", remotePath, err)
		}
	}
	return remotePath
}

// processOutput processes the stdout and stderr streams concurrently
func processOutput(stdout io.Reader, stderr io.Reader) {
	var wg sync.WaitGroup
	wg.Add(2)

	// Goroutine to process stdout
	go func() {
		defer wg.Done()
		if _, err := io.Copy(os.Stdout, stdout); err != nil {
			log.Fatalf("Error copying stdout: %v", err)
		}
	}()

	// Goroutine to process stderr
	go func() {
		defer wg.Done()
		if _, err := io.Copy(os.Stderr, stderr); err != nil {
			log.Fatalf("Error copying stderr: %v", err)
		}
	}()

	// Wait for both goroutines to finish
	wg.Wait()
}

func keyString(k ssh.PublicKey) string {
	return k.Type() + " " + base64.StdEncoding.EncodeToString(k.Marshal())
}

type zitiEdgeConnAdapter struct {
	orig net.Addr
}

func (a zitiEdgeConnAdapter) Network() string {
	return ""
}
func (a zitiEdgeConnAdapter) String() string {
	// ziti connections will have the format: "ziti-edge-router connId=%v, logical=%v", e.MsgCh.Id(), e.MsgCh.LogicalName()
	// see ziti/edge/addr.go in github.com/openziti/sdk-golang if it changes
	// example: ziti-edge-router connId=1, logical=ziti-sdk[router=tls:ec2-3-18-113-172.us-east-2.compute.amazonaws.com:8442]
	parts := strings.Split(a.orig.String(), ":")
	answer := strings.Join(parts[len(parts)-2:], ":")
	answer = strings.ReplaceAll(answer, "]", "")
	return answer
}

func newZitiEdgeConnAdapter(remote net.Addr) zitiEdgeConnAdapter {
	remoteCopy := zitiEdgeConnAdapter{
		orig: remote,
	}
	return remoteCopy
}

func trustedHostKeyCallback(hostname string, remote net.Addr, key ssh.PublicKey) error {
	var keyErr *knownhosts.KeyError
	if err := ensureKnownHosts(); err != nil {
		return err
	}

	knownHosts := knownHostsFile()
	fmt.Println(remote.String())
	cb, err := knownhosts.New(knownHosts)
	if err != nil {
		return err
	}

	err = cb(hostname, newZitiEdgeConnAdapter(remote), key)
	if err != nil {
		if err.Error() == "knownhosts: key is unknown" {
			log.Warnf("key is not known: %s", keyString(key))
			time.Sleep(50 * time.Millisecond)
			fmt.Print("do you want to add this key to your known_hosts file? N/y")

			reader := bufio.NewReader(os.Stdin)
			answer, readerr := reader.ReadString('\n')
			if readerr != nil {
				log.Fatalf("error reading line: %v", readerr)
			}

			if strings.ToLower(answer)[:1] == "y" {
				adderr := addKnownHost_1106(newZitiEdgeConnAdapter(remote).String(), key)
				if adderr != nil {
					log.Fatalf("error adding key to known_hosts: %v", adderr)
				}
				log.Infof("added key to known_hosts: %s", keyString(key))
			} else {
				os.Exit(1)
			}
		}
	}

	// Make sure that the error returned from the callback is host not in file error.
	// If keyErr.Want is greater than 0 length, that means host is in file with different key.
	if errors.As(err, &keyErr) && len(keyErr.Want) > 0 {
		return keyErr
	}

	// Some other error occurred and safest way to handle is to pass it back to user.
	if err != nil {
		return err
	}

	// Key is not trusted because it is not in the file.
	return nil
}

func AddKnownHost(host string, remote net.Addr, key ssh.PublicKey) (err error) {
	knownHosts := knownHostsFile()

	f, err := os.OpenFile(knownHosts, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0600)
	if err != nil {
		return err
	}
	defer func() { _ = f.Close() }()

	remoteNormalized := knownhosts.Normalize(remote.String())
	hostNormalized := knownhosts.Normalize(host)
	addresses := []string{remoteNormalized}

	if hostNormalized != remoteNormalized {
		addresses = append(addresses, hostNormalized)
	}

	_, err = f.WriteString(knownhosts.Line(addresses, key) + "\n")

	return err
}

func knownHostsFile() string {
	home, err := os.UserHomeDir()
	if err != nil {
		log.Fatalf("unable to determine home directory - cannot find known_hosts file: %v", err)
	}
	return path.Join(home, ".ssh", "known_hosts")
}

func addKnownHost_1101(host string, key ssh.PublicKey) error {

	keyValue := keyString(key)
	entry, _, err := ConvertToHashedKnownHost(host, key.Type(), keyValue)
	if err != nil {
		log.Fatalf("Error converting to hashed known_hosts entry: %v", err)
	}

	// Open known_hosts file
	knownHostsPath := filepath.Join(os.Getenv("HOME"), ".ssh", "known_hosts")
	file, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
	if err != nil {
		return fmt.Errorf("failed to open known_hosts file: %w", err)
	}
	defer func() { _ = file.Close() }()

	// Write the entry
	_, err = file.WriteString(entry)
	if err != nil {
		return fmt.Errorf("failed to write to known_hosts file: %w", err)
	}

	return nil

	//// Parse the public key
	//pubKey, _, _, _, errs := ssh.ParseAuthorizedKey([]byte(keyValue))
	//if errs != nil {
	//	return fmt.Errorf("failed to parse public key: %w", errs)
	//}
	//pubVal := keyString(pubKey)
	//
	//// Format the known_hosts entry
	////hostLine := fmt.Sprintf("%s %s", host, pubKey.Type())
	////keyLine := fmt.Sprintf("%s %s\n", hostLine, ssh.FingerprintSHA256(pubKey))
	//
	//// Format the known_hosts entry
	//saltBase64 := ""
	//hashedHostname := ""
	////entry := fmt.Sprintf("|1|%s|%s %s %s\n", base64.StdEncoding.EncodeToString(salt), hashedHost, pubKey.Type(), base64.StdEncoding.EncodeToString(pubKey.Marshal()))
	//keyLine := fmt.Sprintf("|1|%s|%s %s %s", saltBase64, hashedHostname, pubKey.Type(), pubVal)
	//
	//// Open known_hosts file
	//knownHostsPath := filepath.Join(os.Getenv("HOME"), ".ssh", "known_hosts")
	//file, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
	//if err != nil {
	//	return fmt.Errorf("failed to open known_hosts file: %w", err)
	//}
	//defer file.Close()
	//
	//// Write the entry
	//_, err = file.WriteString(keyLine)
	//if err != nil {
	//	return fmt.Errorf("failed to write to known_hosts file: %w", err)
	//}
	//
	//return nil
}

func ensureKnownHosts() error {
	filePath := knownHostsFile()
	_, err := os.Stat(filePath)
	if os.IsNotExist(err) {
		// Create the directories if they don't exist
		dir := filepath.Dir(filePath)
		if err := os.MkdirAll(dir, 0700); err != nil {
			return fmt.Errorf("failed to create directories: %w", err)
		}

		// Create the file with 0600 permissions
		file, err := os.OpenFile(filePath, os.O_CREATE|os.O_WRONLY, 0600)
		if err != nil {
			return fmt.Errorf("failed to create file: %w", err)
		}
		defer file.Close()
	} else if err != nil {
		return fmt.Errorf("error checking file: %w", err)
	}

	return nil
}

// AddHashedKnownHost adds a hashed known host entry to the known_hosts file
func AddHashedKnownHost(host, key string) error {
	// Parse the public key
	pubKey, _, _, _, err := ssh.ParseAuthorizedKey([]byte(key))
	if err != nil {
		return fmt.Errorf("failed to parse public key: %w", err)
	}

	// Generate a random salt for hashing (for simplicity, we use a fixed salt here)
	salt := []byte("random_salt_value") // In practice, use a cryptographically secure random salt

	// Hash the hostname
	hashedHost := HashHostname(host, salt)

	// Format the known_hosts entry
	entry := fmt.Sprintf("|1|%s|%s %s %s\n", base64.StdEncoding.EncodeToString(salt), hashedHost, pubKey.Type(), base64.StdEncoding.EncodeToString(pubKey.Marshal()))

	// Open known_hosts file
	knownHostsPath := filepath.Join(os.Getenv("HOME"), ".ssh", "known_hosts")
	file, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
	if err != nil {
		return fmt.Errorf("failed to open known_hosts file: %w", err)
	}
	defer file.Close()

	// Write the hashed entry
	_, err = file.WriteString(entry)
	if err != nil {
		return fmt.Errorf("failed to write to known_hosts file: %w", err)
	}

	return nil
}

// GenerateRandomSalt creates a 20-byte random salt
func GenerateRandomSalt() ([]byte, error) {
	salt := make([]byte, 20)
	_, err := rand.Read(salt)
	if err != nil {
		return nil, fmt.Errorf("failed to generate random salt: %w", err)
	}
	return salt, nil
}

// HashHostname hashes the hostname with HMAC-SHA1 using the provided salt
func HashHostname(hostname string, salt []byte) string {
	h := hmac.New(sha1.New, salt)
	h.Write([]byte(hostname))
	return base64.StdEncoding.EncodeToString(h.Sum(nil))
}

// ConvertToHashedKnownHost formats the known_hosts entry with hashed hostname
func ConvertToHashedKnownHost(hostname, keyType, keyValue string) (string, string, error) {
	// Generate random salt
	salt, err := GenerateRandomSalt()
	if err != nil {
		return "", "", err
	}

	// Hash the hostname
	hashedHostname := HashHostname(hostname, salt)

	// Encode the salt in base64
	saltBase64 := base64.StdEncoding.EncodeToString(salt)

	// Format the entry: |1|salt|hashed_hostname| key_type key_value
	entry := fmt.Sprintf("|1|%s|%s %s %s", saltBase64, hashedHostname, keyType, keyValue)
	return entry, saltBase64, nil
}

// Format the result as a |1|salt|hashed_hostname| key_type key_value entry for the known_hosts file.

func addKnownHost_1102(hostname string, key ssh.PublicKey) error {
	knownHosts := knownHostsFile()
	f, err := os.OpenFile(knownHosts, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0600)
	if err != nil {
		return err
	}
	defer func() { _ = f.Close() }()

	keyBytes := key.Marshal()
	keyString := base64.StdEncoding.EncodeToString(keyBytes)
	entry := fmt.Sprintf("%s %s %s\n", knownhosts.Normalize(hostname), key.Type(), keyString)

	if _, err := f.WriteString(entry); err != nil {
		return fmt.Errorf("failed to write to known_hosts file: %v", err)
	}

	//remoteNormalized := knownhosts.Normalize(remote.String())
	//hostNormalized := knownhosts.Normalize(host)
	//addresses := []string{remoteNormalized}
	//
	//if hostNormalized != remoteNormalized {
	//	addresses = append(addresses, hostNormalized)
	//}
	//
	//_, err = f.WriteString(knownhosts.Line(addresses, key) + "\n")

	return err
}

func addKnownHost_1106(hostname string, key ssh.PublicKey) error {
	knownHosts := knownHostsFile()
	f, err := os.OpenFile(knownHosts, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0600)
	if err != nil {
		return err
	}
	defer func() { _ = f.Close() }()

	keyValue := keyString(key)
	pubKey, _, _, _, errs := ssh.ParseAuthorizedKey([]byte(keyValue))
	if errs != nil {
		return fmt.Errorf("failed to parse public key: %w", errs)
	}
	//pubVal := keyString(pubKey)

	// Format the known_hosts entry with hashed hostname
	hostPattern := knownhosts.HashHostname(hostname)
	keyBytes := pubKey.Marshal()
	keyString := base64.StdEncoding.EncodeToString(keyBytes)
	entry := fmt.Sprintf("%s %s %s\n", hostPattern, pubKey.Type(), keyString)

	if _, err := f.WriteString(entry); err != nil {
		return fmt.Errorf("failed to write to known_hosts file: %v", err)
	}

	//remoteNormalized := knownhosts.Normalize(remote.String())
	//hostNormalized := knownhosts.Normalize(host)
	//addresses := []string{remoteNormalized}
	//
	//if hostNormalized != remoteNormalized {
	//	addresses = append(addresses, hostNormalized)
	//}
	//
	//_, err = f.WriteString(knownhosts.Line(addresses, key) + "\n")

	return err
}

func hostKeyCallback_1113() ssh.HostKeyCallback {
	knownHostsPath := knownHostsFile()
	hostKeyCallback, err := knownhosts.New(knownHostsPath)
	if err != nil {
		// If the file doesn't exist, create an empty callback
		if os.IsNotExist(err) {
			hostKeyCallback = func(hostname string, remote net.Addr, key ssh.PublicKey) error {
				return nil
			}
		} else {
			// For other errors, we'll just print a warning and proceed with an empty callback
			fmt.Printf("Warning: Error loading known_hosts file: %v\n", err)
			hostKeyCallback = func(hostname string, remote net.Addr, key ssh.PublicKey) error {
				return nil
			}
		}
	}

	return func(hostname string, remote net.Addr, key ssh.PublicKey) error {
		err := hostKeyCallback(hostname, remote, key)
		if err == nil {
			// Key is already known
			return nil
		}

		// If this is a key mismatch, we should not proceed
		var keyError *knownhosts.KeyError
		if errors.As(err, &keyError) {
			return err
		}

		// At this point, the host is unknown. Let's add it.
		f, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
		if err != nil {
			return fmt.Errorf("failed to open known_hosts file: %v", err)
		}
		defer f.Close()

		// Generate the hashed entry
		entry := knownhosts.Line([]string{hostname}, key)
		if _, err := f.WriteString(entry + "\n"); err != nil {
			return fmt.Errorf("failed to write to known_hosts file: %v", err)
		}

		return nil
	}
}

func generateHashedHostname_1125(hostport string) string {
	salt := make([]byte, 20)
	_, err := rand.Read(salt)
	if err != nil {
		panic(fmt.Sprintf("failed to generate salt: %v", err))
	}

	hash := sha1.New()
	hash.Write(salt)
	hash.Write([]byte(hostport))
	digest := hash.Sum(nil)

	return fmt.Sprintf("|1|%s|%s", base64.StdEncoding.EncodeToString(salt), base64.StdEncoding.EncodeToString(digest))
}

func hostKeyCallback_1125() ssh.HostKeyCallback {
	knownHostsPath := knownHostsFile()
	hostKeyCallback, err := knownhosts.New(knownHostsPath)
	if err != nil {
		if os.IsNotExist(err) {
			hostKeyCallback = func(hostname string, remote net.Addr, key ssh.PublicKey) error {
				return nil
			}
		} else {
			fmt.Printf("Warning: Error loading known_hosts file: %v\n", err)
			hostKeyCallback = func(hostname string, remote net.Addr, key ssh.PublicKey) error {
				return nil
			}
		}
	}

	return func(hostname string, remote net.Addr, key ssh.PublicKey) error {
		err := hostKeyCallback(hostname, remote, key)
		if err == nil {
			return nil
		}

		if _, ok := err.(*knownhosts.KeyError); ok {
			return err
		}

		f, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
		if err != nil {
			return fmt.Errorf("failed to open known_hosts file: %v", err)
		}
		defer f.Close()

		hashedEntry := generateHashedHostname_1125(hostname)
		keyString := base64.StdEncoding.EncodeToString(key.Marshal())
		entry := fmt.Sprintf("%s %s %s\n", hashedEntry, key.Type(), keyString)

		if _, err := f.WriteString(entry); err != nil {
			return fmt.Errorf("failed to write to known_hosts file: %v", err)
		}

		return nil
	}
}

func hostKeyCallback_1132(knownHostsPath string) ssh.HostKeyCallback {
	callback, err := knownhosts.New(knownHostsPath)
	if err != nil {
		if os.IsNotExist(err) {
			// If the file doesn't exist, create it
			if err := os.MkdirAll(filepath.Dir(knownHostsPath), 0700); err != nil {
				panic(fmt.Sprintf("failed to create known_hosts directory: %v", err))
			}
			f, err := os.Create(knownHostsPath)
			if err != nil {
				panic(fmt.Sprintf("failed to create known_hosts file: %v", err))
			}
			f.Close()
			callback, err = knownhosts.New(knownHostsPath)
			if err != nil {
				panic(fmt.Sprintf("failed to create empty known_hosts callback: %v", err))
			}
		} else {
			panic(fmt.Sprintf("error loading known_hosts file: %v", err))
		}
	}

	return func(hostname string, remote net.Addr, key ssh.PublicKey) error {
		err := callback(newZitiEdgeConnAdapter(remote).String(), newZitiEdgeConnAdapter(remote), key)
		if err == nil {
			// Key already known
			return nil
		}

		if keyErr, ok := err.(*knownhosts.KeyError); ok {
			if len(keyErr.Want) > 0 {
				// Key mismatch
				return keyErr
			}
			// Key not found, add it
			f, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY, 0600)
			if err != nil {
				return fmt.Errorf("failed to open known_hosts file: %v", err)
			}
			defer f.Close()

			// Generate the hashed entry
			hostToWrite := knownhosts.Normalize(hostname)
			if remote != nil {
				hostToWrite = knownhosts.Normalize(hostname)
			}
			line := knownhosts.Line([]string{hostToWrite}, key)

			if _, err := f.WriteString(line + "\n"); err != nil {
				return fmt.Errorf("failed to append to known_hosts file: %v", err)
			}
		}

		return nil
	}
}

// initializeKnownHosts ensures the known_hosts file exists and returns a callback
func initializeKnownHosts1653(knownHostsPath string) (ssh.HostKeyCallback, error) {
	callback, err := knownhosts.New(knownHostsPath)
	if err == nil {
		return callback, nil
	}

	if !os.IsNotExist(err) {
		return nil, fmt.Errorf("error loading known_hosts file: %v", err)
	}

	// File doesn't exist, create it
	if err := os.MkdirAll(filepath.Dir(knownHostsPath), 0700); err != nil {
		return nil, fmt.Errorf("failed to create known_hosts directory: %v", err)
	}
	f, err := os.Create(knownHostsPath)
	if err != nil {
		return nil, fmt.Errorf("failed to create known_hosts file: %v", err)
	}
	f.Close()

	return knownhosts.New(knownHostsPath)
}

// addHostKey adds a new host key to the known_hosts file
func addHostKey1653(knownHostsPath, hostname string, remote net.Addr, key ssh.PublicKey) error {
	f, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY, 0600)
	if err != nil {
		return fmt.Errorf("failed to open known_hosts file: %v", err)
	}
	defer f.Close()

	hostToWrite := knownhosts.Normalize(hostname)
	//if remote != nil {
	//	hostToWrite = knownhosts.Normalize(net.JoinHostPort(hostname, remote.(*net.TCPAddr).Port))
	//}
	line := knownhosts.Line([]string{hostToWrite}, key)

	if _, err := f.WriteString(line + "\n"); err != nil {
		return fmt.Errorf("failed to append to known_hosts file: %v", err)
	}

	return nil
}

// hostKeyCallback returns a HostKeyCallback function
func hostKeyCallback1653(knownHostsPath string) ssh.HostKeyCallback {
	callback, err := initializeKnownHosts1653(knownHostsPath)
	if err != nil {
		return nil
	}

	return func(hostname string, remote net.Addr, key ssh.PublicKey) error {
		err := callback(hostname, remote, key)
		if err == nil {
			// Key already known
			return nil
		}

		if keyErr, ok := err.(*knownhosts.KeyError); ok {
			if len(keyErr.Want) > 0 {
				// Key mismatch
				return keyErr
			}
			// Key not found, add it
			return addHostKey1653(knownHostsPath, hostname, remote, key)
		}

		return err
	}
}

// addKnownHostEntry1702 adds a new host key to the known_hosts file
func addKnownHostEntry1702(knownHostsPath, hostname string, remote net.Addr, key ssh.PublicKey) error {
	f, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
	if err != nil {
		return fmt.Errorf("failed to open known_hosts file: %v", err)
	}
	defer f.Close()

	var hostToWrite string
	if remote != nil {
		// Check if we can get a port from the remote address
		if addr, ok := remote.(*net.TCPAddr); ok {
			hostToWrite = net.JoinHostPort(hostname, strconv.Itoa(addr.Port))
		} else {
			// If we can't get a port, just use the hostname
			hostToWrite = hostname
		}
	} else {
		hostToWrite = hostname
	}

	hostToWrite = knownhosts.Normalize(hostToWrite)
	line := knownhosts.Line([]string{hostToWrite}, key)

	if _, err := f.WriteString(line + "\n"); err != nil {
		return fmt.Errorf("failed to append to known_hosts file: %v", err)
	}

	return nil
}

// addSSHHostKey1708 connects to an SSH server, retrieves its public key, and adds it to the known_hosts file
func addSSHHostKey1708(knownHostsPath, host string, port int) error {
	// Create a temporary callback to retrieve the host key
	var hostKey ssh.PublicKey
	hostKeyCallback := func(hostname string, remote net.Addr, key ssh.PublicKey) error {
		hostKey = key
		return nil
	}

	config := &ssh.ClientConfig{
		User:            "placeholder", // We don't need a real user for key retrieval
		Auth:            []ssh.AuthMethod{},
		HostKeyCallback: hostKeyCallback,
		Timeout:         5 * time.Second,
	}

	// Connect to the SSH server
	client, err := ssh.Dial("tcp", fmt.Sprintf("%s:%d", host, port), config)
	if err != nil {
		return fmt.Errorf("failed to connect to SSH server: %v", err)
	}
	client.Close()

	// If we've reached this point, we have successfully retrieved the host key
	if hostKey == nil {
		return fmt.Errorf("failed to retrieve host key")
	}

	// Now add the key to the known_hosts file
	f, err := os.OpenFile(knownHostsPath, os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0600)
	if err != nil {
		return fmt.Errorf("failed to open known_hosts file: %v", err)
	}
	defer f.Close()

	hostToWrite := knownhosts.Normalize(fmt.Sprintf("%s:%d", host, port))
	line := knownhosts.Line([]string{hostToWrite}, hostKey)

	if _, err := f.WriteString(line + "\n"); err != nil {
		return fmt.Errorf("failed to append to known_hosts file: %v", err)
	}

	return nil
}
